{"version":3,"sources":["components/AuthContainer.js","components/Auth.jsx","serviceWorker.js","index.js","components/Header.jsx","components/Footer.jsx"],"names":["AuthContainer","createContainer","_","useState","type","setType","id","setId","pass","setPass","token","setToken","handleChangeId","e","target","value","handleChangePass","handleChangeType","document","title","generateToken","btoa","trim","copyText","navigator","clipboard","writeText","useStyles","makeStyles","theme","root","padding","spacing","margin","fg1","flexGrow","button","textField","Form","classes","authContainer","useContainer","React","visible","showPassword","setShowPassword","open","setOpen","handleSnClose","event","reason","Paper","className","FormControl","component","FormLabel","RadioGroup","aria-label","name","onChange","Grid","container","item","xs","sm","FormControlLabel","control","Radio","color","label","InputLabel","htmlFor","Input","required","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","preventDefault","Button","variant","startIcon","readOnly","size","alert","handleSnOpen","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","ContentProps","message","action","key","Boolean","window","location","hostname","match","ReactDOM","render","AppBar","Typography","CssBaseline","Container","fixed","Provider","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1c7c962.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport { createContainer } from 'unstated-next';\r\n\r\nconst useAuthContainer = _ => {\r\n    const [type, setType] = useState(\"auth\");\r\n    const [id, setId] = useState(\"\");\r\n    const [pass, setPass] = useState(\"\");\r\n    const [token, setToken] = useState(\"\");\r\n\r\n    /**\r\n     * タイプ変更イベント\r\n     * @param {Object} e React Event\r\n     */\r\n    const handleChangeType = e => {\r\n        document.title = `${(e.target.value === \"auth\" ? \"通常の認証\" : \"Basic認証\")}用のトークンを作成します。`;\r\n        setType(e.target.value);\r\n    }\r\n\r\n    const handleChangeId = e => {\r\n        setId(e.target.value);\r\n    }\r\n\r\n    const handleChangePass = e => {\r\n        setPass(e.target.value);\r\n    }\r\n\r\n    const generateToken = _ => {\r\n        const token = btoa(`${id.trim()}:${pass.trim()}`);\r\n        setToken(type === \"auth\" ? token : `Basic ${token}`);\r\n    }\r\n\r\n    const copyText = _ => {\r\n        if (navigator.clipboard) {\r\n            navigator.clipboard.writeText(token);\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return {\r\n        type, id, pass, token, \r\n        handleChangeId, handleChangePass, handleChangeType, \r\n        generateToken, copyText\r\n    };\r\n}\r\n\r\nexport const AuthContainer = createContainer(useAuthContainer);","import React from 'react';\r\nimport { AuthContainer } from './AuthContainer'\r\n\r\n// mui\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\n// mui-icons\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(3, 2),\r\n        margin: theme.spacing(3,0)\r\n    },\r\n    fg1:{\r\n        flexGrow: 1,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    textField:{\r\n        margin: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nconst Form = _ => {\r\n    const classes = useStyles();\r\n    const authContainer = AuthContainer.useContainer();\r\n\r\n    const [showPassword, setShowPassword] = React.useState({visible:false});\r\n\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword({ ...showPassword, visible: !showPassword.visible });\r\n    };\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleSnOpen = (e) => {\r\n        if(authContainer.copyText(e)){\r\n            setOpen(true);\r\n        }else{\r\n            alert(\"コピーできません。\\n手動でコピーしてください。\");\r\n        }\r\n    };\r\n    const handleSnClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Paper className={classes.root}>\r\n                <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">トークンのタイプ</FormLabel>\r\n                    <RadioGroup aria-label=\"gender\" name=\"type\" value={authContainer.type} onChange={authContainer.handleChangeType}>\r\n                        <Grid container className={classes.fg1}>\r\n                            <Grid item xs={12} sm={6} className={classes.fg1}>\r\n                                <FormControlLabel value=\"auth\" control={<Radio color=\"primary\" />} label=\"認証\" />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6} className={classes.fg1}>\r\n                                <FormControlLabel value=\"basic\" control={<Radio color=\"primary\" />} label=\"Basic 認証\" />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </RadioGroup>\r\n                </FormControl>\r\n            </Paper>\r\n            <Paper className={classes.root}>\r\n                <FormControl className={classes.textField}>\r\n                    <InputLabel htmlFor=\"login-name\">ログイン名*</InputLabel>\r\n                    <Input\r\n                        required\r\n                        id=\"login-name\"\r\n                        value={authContainer.id}\r\n                        onChange={authContainer.handleChangeId}\r\n                    />\r\n                </FormControl>\r\n                <FormControl className={classes.textField}>\r\n                    <InputLabel htmlFor=\"opassword\">Password*</InputLabel>\r\n                    <Input\r\n                        required\r\n                        id=\"password\"\r\n                        type={showPassword.visible ? 'text' : 'password'}\r\n                        value={authContainer.pass}\r\n                        onChange={authContainer.handleChangePass}\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"パスワードを表示\"\r\n                                    onClick={handleClickShowPassword}\r\n                                    onMouseDown={handleMouseDownPassword}\r\n                                >\r\n                                    {showPassword.visible ? <Visibility /> : <VisibilityOff />}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n                </FormControl>\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant=\"contained\" \r\n                    className={classes.button}\r\n                    startIcon={<VpnKeyIcon />}\r\n                    onClick={authContainer.generateToken}\r\n                >\r\n                    トークン生成\r\n                </Button>\r\n            </Paper>\r\n            <Paper className={classes.root}>\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"token\">トークン</InputLabel>\r\n                    <Input\r\n                        id=\"token\"\r\n                        value={authContainer.token}\r\n                        readOnly\r\n                    />\r\n                </FormControl>\r\n                \r\n                <Button \r\n                    size=\"small\" \r\n                    variant=\"outlined\" \r\n                    color=\"primary\" \r\n                    className={classes.button}\r\n                    onClick={e => handleSnOpen(e)}\r\n                >\r\n                    <FileCopyIcon /> コピー\r\n                </Button>\r\n            </Paper>\r\n\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                open={open}\r\n                autoHideDuration={2000}\r\n                onClose={handleSnClose}\r\n                ContentProps={{\r\n                    'aria-describedby': 'message-id',\r\n                }}\r\n                message={<span id=\"message-id\">コピーしました</span>}\r\n                action={[\r\n                    <IconButton\r\n                        key=\"close\"\r\n                        aria-label=\"close\"\r\n                        color=\"inherit\"\r\n                        onClick={handleSnClose}\r\n                    >\r\n                        <CloseIcon />\r\n                    </IconButton>,\r\n                ]}\r\n            />\r\n        </>\r\n    );\r\n}\r\nexport const Auth = _ => {\r\n    return (\r\n        <AuthContainer.Provider>\r\n            <Form />\r\n        </AuthContainer.Provider>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\n\n// #region import components\nimport Header from './components/Header';\nimport { Auth } from './components/Auth';\nimport Footer from './components/Footer';\n// #endregion import components\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div className=\"App\">\n        <Header />\n        <CssBaseline />\n        <Container fixed>\n            <Auth />\n        </Container>\n        <Footer />\n    </div>\n    ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/ToolBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nexport default function Header() {\r\n    const useStyles = makeStyles(theme => ({\r\n        root:{\r\n            flexGrow:1,\r\n        },\r\n        title:{\r\n            flexGrow: 1,\r\n        }\r\n    }));\r\n    const classes = useStyles();\r\n\r\n    function handleJumpGithub(){\r\n        window.open(\"https://github.com/Yanchi4425/kintone-auth-token-generator\",\"_blank\");\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <ToolBar>\r\n                    <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\r\n                        kintone 認証トークン作成ツール\r\n                    </Typography>\r\n                    <div>\r\n                        <IconButton\r\n                            aria-label=\"Open Github.\"\r\n                            onClick={handleJumpGithub}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <GitHubIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                </ToolBar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <footer>\r\n            <h3>フッター</h3>\r\n        </footer>\r\n    );\r\n}\r\n"],"sourceRoot":""}