{"version":3,"sources":["components/Header.jsx","components/Auth.jsx","components/Main.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Auth","createToken","bind","console","log","this","props","type","changeType","generateToken","placeholder","value","state","id","onChange","changeId","pass","changePassword","onClick","token","copyText","React","Component","Main","basename","to","exact","path","Footer","App","val","setState","e","target","btoa","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9624d9ec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header>\r\n            <h1>kintone 認証トークン作成ツール</h1>\r\n        </header>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Auth extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.createToken = this.createToken.bind(this);\r\n    }\r\n    createToken(){\r\n        console.log(this.props.type)\r\n        this.props.changeType(this.props.type);\r\n        this.props.generateToken();\r\n    }\r\n    render(){\r\n        return (\r\n            <>\r\n                <h2>{this.props.type === \"auth\" ? \"アプリAPI認証トークン\" : \"Basic認証用トークン作成\"}</h2>\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"ログイン名\"\r\n                    value={this.props.state.id}\r\n                    onChange={this.props.changeId}\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"パスワード\"\r\n                    value={this.props.state.pass}\r\n                    onChange={this.props.changePassword}\r\n                />\r\n                <button onClick={this.createToken}>トークン生成</button>\r\n                <input \r\n                    type=\"text\"\r\n                    value={this.props.state.token}\r\n                    onChange={this.props.generateToken}\r\n                />\r\n                <button onClick={this.props.copyText}>コピー</button>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Auth from './Auth';\r\n\r\n\r\nexport default function Main(props) {\r\n    return (\r\n        <article>\r\n            <Router basename=\"/kintone-auth-token-generator/\">\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/\">TOP</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/Auth\">認証トークン</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/BasicAuth\">Basic認証トークン</Link>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <Switch>\r\n                    <Route exact path=\"/\"></Route>\r\n                    <Route exact path=\"/Auth\">\r\n                        <Auth \r\n                            type={\"auth\"}\r\n                            state={props.state} \r\n                            changeType={props.changeType}\r\n                            changeId={props.changeId}\r\n                            changePassword={props.changePassword}\r\n                            generateToken={props.generateToken}\r\n                            copyText={props.copyText} \r\n                        />\r\n                    </Route>\r\n                    <Route path=\"/BasicAuth\">\r\n                        <Auth \r\n                            type={\"basic\"}\r\n                            state={props.state} \r\n                            changeType={props.changeType}\r\n                            changeId={props.changeId}\r\n                            changePassword={props.changePassword}\r\n                            generateToken={props.generateToken}\r\n                            copyText={props.copyText} \r\n                        />\r\n\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </article>\r\n    );\r\n\r\n}","import React from 'react';\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <footer>\r\n            <h3>フッター</h3>\r\n        </footer>\r\n    );\r\n}\r\n","import React from 'react';\n// import './App.css';\n\n// #region import components\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\n// #endregion import components\n\nexport default class App extends React.Component{\n  // #region .ctor\n  constructor(){\n    super();\n    this.state = {type: \"\", id: \"\", pass: \"\", token: \"\",}\n    this.changeType = this.changeType.bind(this);\n    this.changeId = this.changeId.bind(this);\n    this.changePassword = this.changePassword.bind(this);\n    this.generateToken = this.generateToken.bind(this);\n    this.copyText = this.copyText.bind(this);\n  }\n  // #endregion .ctor\n  // #region methods\n  changeType(val){\n    this.setState({\n      type: val\n    });\n  }\n  changeId(e){\n    this.setState({\n      id: e.target.value\n    });\n  }\n  changePassword(e){\n    this.setState({\n      pass: e.target.value\n    });\n  }\n  generateToken() {\n    const token = btoa(`${this.state.id}:${this.state.pass}`);\n    this.setState({\n      token: this.state.type === \"auth\" ? token : `Basic ${token}`,\n    });\n  }\n  copyText(){\n    console.log(this.state.token);\n  }\n  // #endregion methods\n  render(){\n      return (\n        <div className=\"App\">\n          <Header />\n          <Main \n            state={this.state}\n            changeType={this.changeType}\n            changeId={this.changeId} \n            changePassword={this.changePassword} \n            generateToken={this.generateToken} \n            copyText={this.copyText} \n          />\n          <Footer />\n        </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n    ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}