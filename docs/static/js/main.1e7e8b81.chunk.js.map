{"version":3,"sources":["components/Header.jsx","components/AuthContainer.js","components/Auth.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","AuthContainer","createContainer","_","useState","type","setType","id","setId","pass","setPass","token","setToken","handleChangeId","e","target","value","handleChangePass","handleChangeType","console","log","generateToken","btoa","trim","copyText","navigator","clipboard","writeText","alert","Form","authContainer","useContainer","name","onChange","checked","placeholder","onClick","readOnly","Auth","Provider","Footer","App","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAEe,SAASA,IACpB,OACI,gCACI,2G,kBC2CCC,EAAgBC,aA7CJ,SAAAC,GAAM,IAAD,EACFC,mBAAS,QADP,mBACnBC,EADmB,KACbC,EADa,OAENF,mBAAS,IAFH,mBAEnBG,EAFmB,KAEfC,EAFe,OAGFJ,mBAAS,IAHP,mBAGnBK,EAHmB,KAGbC,EAHa,OAIAN,mBAAS,IAJT,mBAInBO,EAJmB,KAIZC,EAJY,KAsC1B,MAAO,CACHP,OAAME,KAAIE,OAAME,QAChBE,eAzBmB,SAAAC,GACnBN,EAAMM,EAAEC,OAAOC,QAwBCC,iBArBK,SAAAH,GACrBJ,EAAQI,EAAEC,OAAOC,QAoBiBE,iBA9Bb,SAAAJ,GACrBK,QAAQC,IAAI,oBAAqBN,EAAEC,OAAOC,OAC1CV,EAAQQ,EAAEC,OAAOC,QA6BjBK,cAlBkB,SAAAlB,GAClB,IAAMQ,EAAQW,KAAK,GAAD,OAAIf,EAAGgB,OAAP,YAAiBd,EAAKc,SACxCX,EAAkB,SAATP,EAAkBM,EAAlB,gBAAmCA,KAgB7Ba,SAbF,SAAArB,GACbgB,QAAQC,IAAI,YACRK,UAAUC,WACVD,UAAUC,UAAUC,UAAUhB,GAC9BiB,MAAM,qDAENA,MAAM,+IClCZC,EAAO,SAAA1B,GACT,IAAM2B,EAAgB7B,EAAc8B,eAEpC,OACI,oCACI,6BACI,+BAAO,2BAAO1B,KAAK,QAAQ2B,KAAK,OAAOhB,MAAM,OAAOiB,SAAUH,EAAcZ,iBAAkBgB,QAAgC,SAAvBJ,EAAczB,OAArH,wCACA,+BAAO,2BAAOA,KAAK,QAAQ2B,KAAK,OAAOhB,MAAM,QAAQiB,SAAUH,EAAcZ,iBAAkBgB,QAAgC,SAAvBJ,EAAczB,OAAtH,+CAEJ,2BACIA,KAAK,OACL8B,YAAY,iCACZnB,MAAOc,EAAcvB,GACrB0B,SAAUH,EAAcjB,iBAE5B,2BACIR,KAAK,WACL8B,YAAY,iCACZnB,MAAOc,EAAcrB,KACrBwB,SAAUH,EAAcb,mBAE5B,4BAAQmB,QAASN,EAAcT,eAA/B,wCACA,2BACIhB,KAAK,OACLgC,UAAQ,EACRrB,MAAOc,EAAcnB,QAEzB,4BAAQyB,QAASN,EAAcN,UAA/B,wBAICc,EAAO,SAAAnC,GAChB,OACI,kBAACF,EAAcsC,SAAf,KACI,kBAAC,EAAD,QCnCG,SAASC,IACpB,OACI,gCACI,yD,ICISC,E,iLAEf,OACE,yBAAKC,UAAU,OACb,kBAAC1C,EAAD,MACA,kBAAC,EAAD,MACA,kBAACwC,EAAD,W,GANuBG,IAAMC,WCGnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,EAAD,MACCC,SAASC,eAAe,SD0HvB,kBAAmB5B,WACrBA,UAAU6B,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1e7e8b81.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header>\r\n            <h1>kintone 認証トークン作成ツール</h1>\r\n        </header>\r\n    );\r\n}\r\n","import {useState} from 'react';\r\nimport { createContainer } from 'unstated-next';\r\n\r\nconst useAuthContainer = _ => {\r\n    const [type, setType] = useState(\"auth\");\r\n    const [id, setId] = useState(\"\");\r\n    const [pass, setPass] = useState(\"\");\r\n    const [token, setToken] = useState(\"\");\r\n\r\n    /**\r\n     * タイプ変更イベント\r\n     * @param {Object} e React Event\r\n     */\r\n    const handleChangeType = e => {\r\n        console.log(\"handleChangeType:\", e.target.value)\r\n        setType(e.target.value);\r\n    }\r\n\r\n    const handleChangeId = e => {\r\n        setId(e.target.value);\r\n    }\r\n\r\n    const handleChangePass = e => {\r\n        setPass(e.target.value);\r\n    }\r\n\r\n    const generateToken = _ => {\r\n        const token = btoa(`${id.trim()}:${pass.trim()}`);\r\n        setToken(type === \"auth\" ? token : `Basic ${token}`);\r\n    }\r\n\r\n    const copyText = _ => {\r\n        console.log(\"textCopy\");\r\n        if (navigator.clipboard) {\r\n            navigator.clipboard.writeText(token);\r\n            alert(\"コピーしました。\")\r\n        }else{\r\n            alert(\"コピーできません。\\n手動でコピーしてください。\")\r\n        }\r\n    }\r\n\r\n    return {\r\n        type, id, pass, token, \r\n        handleChangeId, handleChangePass, handleChangeType, \r\n        generateToken, copyText\r\n    };\r\n}\r\n\r\nexport const AuthContainer = createContainer(useAuthContainer);","import React from 'react';\r\nimport { AuthContainer } from './AuthContainer'\r\n\r\nconst Form = _ => {\r\n    const authContainer = AuthContainer.useContainer();\r\n\r\n    return (\r\n        <>\r\n            <nav>\r\n                <label><input type=\"radio\" name=\"type\" value=\"auth\" onChange={authContainer.handleChangeType} checked={authContainer.type === \"auth\"} />認証トークン</label>\r\n                <label><input type=\"radio\" name=\"type\" value=\"basic\" onChange={authContainer.handleChangeType} checked={authContainer.type !== \"auth\"} />Basic 認証トークン</label>\r\n            </nav>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"ログイン名\"\r\n                value={authContainer.id}\r\n                onChange={authContainer.handleChangeId}\r\n            />\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"パスワード\"\r\n                value={authContainer.pass}\r\n                onChange={authContainer.handleChangePass}\r\n            />\r\n            <button onClick={authContainer.generateToken}>トークン生成</button>\r\n            <input\r\n                type=\"text\"\r\n                readOnly\r\n                value={authContainer.token}\r\n            />\r\n            <button onClick={authContainer.copyText}>コピー</button>\r\n        </>\r\n    );\r\n}\r\nexport const Auth = _ => {\r\n    return (\r\n        <AuthContainer.Provider>\r\n            <Form />\r\n        </AuthContainer.Provider>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <footer>\r\n            <h3>フッター</h3>\r\n        </footer>\r\n    );\r\n}\r\n","import React from 'react';\n// import './App.css';\n\n// #region import components\nimport Header from './components/Header';\nimport {Auth} from './components/Auth';\nimport Footer from './components/Footer';\n// #endregion import components\n\nexport default class App extends React.Component{\n  render(){\n      return (\n        <div className=\"App\">\n          <Header />\n          <Auth />\n          <Footer />\n        </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n    ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}